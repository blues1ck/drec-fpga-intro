module uart_rx #(
    parameter CLKS_PER_BIT = 208 // 24 МГц / 115200 бит/с
)(
    input clk,
    input rst_n,
    input rx_serial,
    output [7:0] rx_byte,
    output rx_dv
);

// Состояния конечного автомата
typedef enum {
    IDLE,
    RX_START_BIT,
    RX_DATA_BITS,
    RX_STOP_BIT,
    CLEANUP
} state_t;

reg [2:0] state = IDLE;
reg [7:0] clk_cnt = 0;
reg [2:0] bit_idx = 0;
reg [7:0] rx_data = 0;
reg rx_dv_reg = 0;
reg rx_sync = 0;

// Синхронизация входящего сигнала
always @(posedge clk) begin
    rx_sync <= {rx_sync[0], rx_serial};
end

// Основной конечный автомат
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        state <= IDLE;
        clk_cnt <= 0;
        bit_idx <= 0;
        rx_data <= 0;
        rx_dv_reg <= 0;
    end
    else begin
        case (state)
            IDLE: begin
                rx_dv_reg <= 0;
                if (rx_sync == 1'b0) begin
                    state <= RX_START_BIT;
                    clk_cnt <= 0;
                end
            end
            
            RX_START_BIT: begin
                if (clk_cnt == (CLKS_PER_BIT-1)/2) begin
                    if (rx_sync == 1'b0) begin
                        clk_cnt <= 0;
                        state <= RX_DATA_BITS;
                    end
                    else state <= IDLE;
                end
                else clk_cnt <= clk_cnt + 1;
            end
            
            RX_DATA_BITS: begin
                if (clk_cnt < CLKS_PER_BIT-1) begin
                    clk_cnt <= clk_cnt + 1;
                end
                else begin
                    clk_cnt <= 0;
                    rx_data[bit_idx] <= rx_sync;
                    if (bit_idx == 7) begin
                        state <= RX_STOP_BIT;
                        bit_idx <= 0;
                    end
                    else bit_idx <= bit_idx + 1;
                end
            end
            
            RX_STOP_BIT: begin
                if (clk_cnt < CLKS_PER_BIT-1) begin
                    clk_cnt <= clk_cnt + 1;
                end
                else begin
                    rx_dv_reg <= 1;
                    clk_cnt <= 0;
                    state <= CLEANUP;
                end
            end
            
            CLEANUP: begin
                state <= IDLE;
                rx_dv_reg <= 0;
            end
        endcase
    end
end

assign rx_byte = rx_data;
assign rx_dv = rx_dv_reg;

endmodule
